package com.guessinggame.guessinggame.controller;import com.guessinggame.guessinggame.entity.Game;import com.guessinggame.guessinggame.entity.User;import com.guessinggame.guessinggame.model.Attempt;import com.guessinggame.guessinggame.services.GameUtils;import com.guessinggame.guessinggame.services.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.SessionAttributes;import javax.validation.Valid;@Controller@SessionAttributes({"user", "game", "attempt"})public class GameController {    @Autowired    private GameUtils gameUtils;    @Autowired    private UserService userService;    @RequestMapping("/new-game")    public String newGame() {        return "/game";    }    @RequestMapping("/game-username")    public String newGameName(Model model) {        model.addAttribute("user", new User());        return "game-username";    }    @RequestMapping("/process-username")    public String processUsername(Model model,                                  @Valid User user,                                  BindingResult bindingResult) {        if (bindingResult.hasErrors()) {            return "/game-username";        }        user.setUsername(user.getUsername().toLowerCase());        if (userService.getUserByUsername(user.getUsername()) != null) {            user = userService.getUserByUsername(user.getUsername());        }        userService.save(user);        model.addAttribute("user", user);        return "redirect:/play-game";    }    @RequestMapping("/play-game")    public String playGame(@ModelAttribute User user, Model model) {        return "play-game";    }    @RequestMapping("/start-game")    public String startGame(Model model) {        User user = (User) model.getAttribute("user");        Game game = new Game();        Attempt attempt = new Attempt();        gameUtils.startGame(game);        game.setUser(user);        user.setPlayedGames(user.getPlayedGames() + 1);        userService.save(user);        model.addAttribute("attempt", attempt);        model.addAttribute("user", user);        model.addAttribute("game", game);        model.addAttribute("gameUtils", gameUtils);        model.addAttribute("isPlay", gameUtils.isPlay());        return "/play-game";    }    @RequestMapping("/process-game")    public String processGame(@ModelAttribute User user,                              @Valid Attempt attempt,                              BindingResult bindingResult,                              Model model) {        if (bindingResult.hasErrors()) {            return "/play-game";        }        gameUtils.isContinuumToPlay((Game)model.getAttribute("game"));        model.addAttribute("numberOfMatchExactInPlace",                gameUtils.getNumberOfMatchingNumberExactInPlace(attempt, (Game)model.getAttribute("game")));        model.addAttribute("numberOfMatchNotInPlace",                gameUtils.getNumberOfMatchingDigitsNotInPlace(attempt, (Game)model.getAttribute("game")));        model.addAttribute("log", gameUtils.getLog());        model.addAttribute("gameUtils", gameUtils);        model.addAttribute("isPlay", gameUtils.isPlay());        return "play-game";    }    @RequestMapping("/leaderboard")    public String leaderboardScreen(Model model) {        model.addAttribute("leaderBoard", gameUtils.getLeaderUsers(null));        return "leaderboard";    }    @RequestMapping("/process-leaderboard")    public String processLeaderboard(Model model, @RequestParam String minPlayedGames) {        if(!gameUtils.isDigit(minPlayedGames)) {            model.addAttribute("error", "There should be entered digit number");        }        model.addAttribute("leaderBoard", gameUtils.getLeaderUsers(minPlayedGames));        return "leaderboard";    }}